$ErrorCounter = 0
$AddonName = ''
$Host.PrivateData.ProgressBackgroundColor = 'Black'
$Host.PrivateData.ProgressForegroundColor = 'DarkRed'
$LoaderCounter = 0
$LoaderElements = @('|','/','-','\')

function Header {
    param(
        [bool]$WithClear = $true
    )
    if($WithClear){ CustomClear }
    if($AddonName -eq ''){
        Write-Host ">> dMargaret`n" -ForegroundColor White -BackgroundColor DarkRed
    } else {
        Write-Host ">> dMargaret" -ForegroundColor White -BackgroundColor DarkRed -NoNewline
        Write-Host " ($AddonName)`n" -ForegroundColor DarkRed
    }
}

function CustomClear {
    for($i=0;$i -lt 100;$i++){Write-Host "                                                                                                                                                 "}
    Clear-Host
}

function Error {
    param(
        [string]$Message
    )
    Write-Host "  [X] $Message`n`a" -ForegroundColor Red
}

function CustomProgress {
    param(
        [int]$Total,
        [int]$Progress,
        [int]$Counter
    )
    Clear-Host
    Header -WithClear $false
    Write-Host "`n  $($LoaderElements[$Counter])" -ForegroundColor DarkRed -NoNewline
    Write-Host " Generating $AddonName..." -ForegroundColor Gray
    Write-Host "   $Progress/$Total ($($AddonNameLower + "\" + $ToCreate[$i].Name))" -ForegroundColor DarkGray
}

Header

$AcceptLicense = $Host.UI.PromptForChoice("", "=> Use of this software is governed by LICENSE. Do you agree to continue ?", ("&Yes", "&No"), 1)

Header

if ($AcceptLicense -eq 0) {
    Write-Host "   Checking internet connection...`n`n" -ForegroundColor DarkCyan
    if(Test-Connection 8.8.8.8 -Quiet){
        Header
        Write-Host "Welcome ! Let's start with a few simple questions:`n" -ForegroundColor DarkGray

        do {
            $AskedAuthorName = Read-Host -Prompt ">>> Enter your name (no whitespace, no special characters)"
            if($AskedAuthorName -notmatch '^[a-zA-Z0-9_]*$'){ $ErrorCounter++ }
            if($ErrorCounter -ge 1){ Error -Message "Incorrect name ! Please retry" }
        } while($ErrorCounter -ne 0)

        do {
            $AskedAddonName = Read-Host -Prompt ">>> Enter your addon name (no whitespace, no special characters)"
            if($AskedAddonName -notmatch '^[a-zA-Z0-9]*$'){ $ErrorCounter++ }
            if($ErrorCounter -ge 1){ Error -Message "Incorrect name ! Please retry" }
        } while($ErrorCounter -ne 0)

        $AskedAddonDescription = Read-Host -Prompt ">>> Enter a short addon description"

        $AddCommandsHandler = $Host.UI.PromptForChoice("", ">>> Do you want a Commands Handler in your addon ?", ("&Yes", "&No"), 0)
        $AddUIElements = $Host.UI.PromptForChoice("", ">>> Do you want some basics UI elements in your addon ?", ("&Yes", "&No"), 1)
        $AddNotifications = $Host.UI.PromptForChoice("", ">>> Do you want a notifications system in your addon ?", ("&Yes", "&No"), 0)
        $AddProperties = $Host.UI.PromptForChoice("", ">>> Do you want a properties system in your addon ?", ("&Yes", "&No"), 1)

        #Transform answers

        $AuthorNameLower = $AskedAuthorName.ToLower()
        $AskedAddonNameLower = $AskedAddonName.ToLower()

        $AddonName = $AuthorNameLower.Substring(0,1) + $AskedAddonNameLower.Substring(0,1).ToUpper() + $AskedAddonNameLower.Substring(1, $AskedAddonNameLower.Length-1)
        $AddonNameLower = $AddonName.ToLower()

        $FileHeader = "--[[=======================================================`n`n	ASCII_NAME_TO_REPLACE`n`n	$AddonName (1.0.0)`n	by $AskedAuthorName`n	Copyright ©️ $(Get-Date -Format "yyyy") $AskedAuthorName All Rights Reserved`n	All 3rd party content is public domain or used with permission`n	$AskedAuthorName is the copyright holder of all code below. Do not distribute in any circumstances.`n`n=======================================================]]"
        $GVar = "$AskedAuthorName.$AskedAddonName"

        [System.Collections.ArrayList]$ToCreate = @()

        # Folders
        if($AddCommandsHandler -eq 0) {
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\register\commands"
                Type = "Directory"
                Content = $NULL
            })
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\register\concommands"
                Type = "Directory"
                Content = $NULL
            })
        }
        if($AddUIElements -eq 0) {
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\utils\ui\panels"
                Type = "Directory"
                Content = $NULL
            })
        }
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\register\hooks\server"
            Type = "Directory"
            Content = $NULL
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\register\hooks\client"
            Type = "Directory"
            Content = $NULL
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\register\network\server"
            Type = "Directory"
            Content = $NULL
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\register\network\client"
            Type = "Directory"
            Content = $NULL
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\entities"
            Type = "Directory"
            Content = $NULL
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "resource\fonts"
            Type = "Directory"
            Content = $NULL
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "materials\$AuthorNameLower\$AskedAddonNameLower"
            Type = "Directory"
            Content = $NULL
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "sound\$AuthorNameLower\$AskedAddonNameLower"
            Type = "Directory"
            Content = $NULL
        })

        # Files
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\autorun\__core_$AddonNameLower.lua"
            Type = "File"
            Content = "local addonName = `"$AddonNameLower`"`n`n$FileHeader`n`n$AskedAuthorName = $AskedAuthorName or {}`n$GVar = {}`n$GVar.Config = {}`n$GVar.Utils = {}`n$GVar.Utils.Langs = {}`n$GVar.Utils.Colors = {}`n$GVar.Utils.Strings = {}`n`nif SERVER then`n	$GVar.Commands = {}`n	$GVar.Infos = {`n		Name = addonName,`n	}`n	$GVar.Data = {}`n`n	if not file.Exists(`"$AuthorNameLower/`" .. addonName,`"DATA`") then`n		file.CreateDir(`"$AuthorNameLower/`" .. addonName)`n	end`nend`n`nif CLIENT then`n	$GVar.Notifications = {}`nend`n`n-- LOADING FUNCTIONS --`n`nlocal function loadDir( strDir, strFileType )`n    local tblFiles, tblDirs = file.Find( addonName .. `"/`" .. strDir .. `"*`", `"LUA`" )`n`n    for k, v in pairs( tblFiles ) do`n		local fileUrl = addonName .. `"/`" .. strDir .. v`n        if strFileType == `"server`" then`n            if SERVER then include( fileUrl ) end`n        elseif strFileType == `"client`" then`n            if SERVER then`n                AddCSLuaFile( fileUrl )`n            else`n                include( fileUrl )`n            end`n        elseif strFileType == `"shared`" then`n			if SERVER then AddCSLuaFile( fileUrl ) end`n            include( fileUrl )`n        end`n    end`nend`n`nlocal function loadUtils()`n	loadDir( `"utils/`", `"shared`" )`n	loadDir( `"utils/langs/`", `"shared`" )`n	loadDir( `"utils/ui/`", `"client`" )`n	"+$(if($AddUIElements -eq 0){"loadDir( `"utils/ui/panels/`", `"client`" )`n"})+"end`n`nlocal function loadCommands()`n	"+$(if($AddCommandsHandler -eq 0){"loadDir( `"register/concommands/`", `"client`" )`n	loadDir( `"register/commands/`", `"server`" )`n"})+"	"+$(if($AddProperties -eq 0){"loadDir( `"register/properties/`", `"client`" )"})+"`nend`n`nlocal function loadHooks()`n	loadDir( `"register/hooks/client/`", `"client`" )`n	loadDir( `"register/hooks/server/`", `"server`" )`nend`n`nlocal function loadNets()`n	loadDir( `"register/network/client/`", `"client`" )`n	loadDir( `"register/network/server/`", `"server`" )`nend`n`n-- ADDON LOADER --`n`nloadDir( `"`", `"shared`" )`nloadUtils()`n`nif SERVER then`n	MsgC($GVar.Utils.Colors.Grey, $GVar.Utils.Strings.separator)`n	MsgC($GVar.Utils.Colors.DarkBlue, $GVar.Utils.Strings.ascii_name)`n	MsgC($GVar.Utils.Colors.Grey, $GVar.Utils.Strings.separator)`n`n	if !$GVar.RSTest then`n		RunString(`"$GVar.RSTest = true`", `"$AddonNameLower_rstest`")`n		if !$GVar.RSTest then MsgC($GVar.Utils.Colors.Red, `"RunString() does not work properly. Stopping $AddonName !`") return end`n	end`nend`n`nif SERVER then`n	MsgC($GVar.Utils.Colors.Aqua, `"	Verifying configuration...\n`")`n	MsgC($GVar.Utils.Colors.White, `"\n	Choosen Language: `", $GVar.Utils.Colors.Aqua, $GVar.Config.Lang)`n`n	MsgC(`"\n`")`nend`n`nif SERVER then`n	MsgC($GVar.Utils.Colors.Grey, $GVar.Utils.Strings.separator)`n	MsgC($GVar.Utils.Colors.Aqua, `"	Loading modules and commands...\n`")`nend`n`nloadCommands()`nloadHooks()`nloadNets()`n`nloadDir( `"client/`", `"client`" )`nloadDir( `"server/`", `"server`" )`nloadDir( `"shared/`", `"shared`" )`n`nif SERVER then`n	MsgC($GVar.Utils.Colors.Green, `"	Loading ended !\n`")`n	MsgC($GVar.Utils.Colors.Grey, $GVar.Utils.Strings.separator)`nend"
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\utils\langs\fr.lua"
            Type = "File"
            Content = "$FileHeader`n`nlocal lang = {`n	_Hello_World_ = `"Bonjour le Monde !`",`n	_Unauthorized_Action_ = `"Action non autorisee !`",`n	_Information_ = `"Information`",`n	_Success_ = `"Succes`",`n	_Warning_ = `"Attention`",`n	_Error_ = `"Erreur`",`n}`n`n$GVar.Utils:RegisterLanguage(`"fr`", lang)"
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\utils\langs\en.lua"
            Type = "File"
            Content = "$FileHeader`n`nlocal lang = {`n	_Hello_World_ = `"Hello World !`",`n	_Unauthorized_Action_ = `"Unauthorized action !`",`n	_Information_ = `"Information`",`n	_Success_ = `"Success`",`n	_Warning_ = `"Warning`",`n	_Error_ = `"Error`",`n}`n`n$GVar.Utils:RegisterLanguage(`"en`", lang)"
        })
        if($AddUIElements -eq 0) {
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\utils\ui\avatar.lua"
                Type = "File"
                Content = "$FileHeader`n`nlocal $($AskedAuthorName)UIAvatar = {}`n`nlocal cos, sin, rad = math.cos, math.sin, math.rad`nAccessorFunc($($AskedAuthorName)UIAvatar, `"m_masksize`", `"MaskSize`", FORCE_NUMBER)`n`nfunction $($AskedAuthorName)UIAvatar:Init()`n    self.Avatar = vgui.Create(`"AvatarImage`", self)`n    self.Avatar:SetPaintedManually(true)`n    self:SetMaskSize(24)`nend`n`nfunction $($AskedAuthorName)UIAvatar:PerformLayout()`n    self.Avatar:SetSize(self:GetWide(), self:GetTall())`nend`n`nfunction $($AskedAuthorName)UIAvatar:SetPlayer(id)`n    self.Avatar:SetPlayer(id, self:GetWide())`nend`n`nfunction $($AskedAuthorName)UIAvatar:SetSteamID(sid, size)`n    self.Avatar:SetSteamID(sid, size)`nend`n`nfunction $($AskedAuthorName)UIAvatar:Paint(w, h)`n    render.ClearStencil()`n    render.SetStencilEnable(true)`n    render.SetStencilWriteMask(1)`n    render.SetStencilTestMask(1)`n    render.SetStencilFailOperation(STENCILOPERATION_REPLACE)`n    render.SetStencilPassOperation(STENCILOPERATION_ZERO)`n    render.SetStencilZFailOperation(STENCILOPERATION_ZERO)`n    render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)`n    render.SetStencilReferenceValue(1)`n`n    local _m = self.m_masksize`n    local circle, t = {}, 0`n    for i = 1, 360 do`n        t = rad(i * 720) / 720`n`n        circle[i] = {`n            x = w / 2 + cos(t) * _m,`n            y = h / 2 + sin(t) * _m`n        }`n    end`n`n    draw.NoTexture()`n    surface.SetDrawColor(color_white)`n    surface.DrawPoly(circle)`n`n    render.SetStencilFailOperation(STENCILOPERATION_ZERO)`n    render.SetStencilPassOperation(STENCILOPERATION_REPLACE)`n    render.SetStencilZFailOperation(STENCILOPERATION_ZERO)`n    render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)`n    render.SetStencilReferenceValue(1)`n`n    self.Avatar:SetPaintedManually(false)`n    self.Avatar:PaintManual()`n    self.Avatar:SetPaintedManually(true)`n`n    render.SetStencilEnable(false)`n    render.ClearStencil()`nend`n`nvgui.Register(`"$($AskedAuthorName)UIAvatar`", $($AskedAuthorName)UIAvatar)"
            })
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\utils\ui\frame.lua"
                Type = "File"
                Content = "$FileHeader`n`nlocal $($AskedAuthorName)UIFrame = {}`n`nfunction $($AskedAuthorName)UIFrame:Init()`n	self:Center()`n	self:SetTitle(`"`")`n	self:SetVisible(true)`n	self:SetDraggable(true)`n	self:ShowCloseButton(false)`n    self:MakePopup()`n	gui.EnableScreenClicker(true)`n`n	local closeButton = vgui.Create(`"DButton`", self)`n	closeButton:SetSize(16, 16)`n	closeButton:SetPos(20,13)`n	closeButton:SetText(`"`")`n	function closeButton:Paint(w,h)`n		draw.RoundedBox(w,0,0,w,h,$GVar.Utils.Colors.Red)`n	end`n	closeButton.DoClick = function()`n		gui.EnableScreenClicker(false)`n		if IsValid(self) then self:Remove() end`n	end`n`n	local windowsModeButton = vgui.Create(`"DButton`", self)`n	windowsModeButton:SetSize(16, 16)`n	windowsModeButton:SetPos(45,13)`n	windowsModeButton:SetText(`"`")`n	function windowsModeButton:Paint(w,h)`n		draw.RoundedBox(w,0,0,w,h,$GVar.Utils.Colors.Orange)`n	end`n`n	local minimizeButton = vgui.Create(`"DButton`", self)`n	minimizeButton:SetSize(16, 16)`n	minimizeButton:SetPos(70,13)`n	minimizeButton:SetText(`"`")`n	function minimizeButton:Paint(w,h)`n		draw.RoundedBox(w,0,0,w,h,$GVar.Utils.Colors.Green)`n	end`nend`n`nfunction $($AskedAuthorName)UIFrame:Paint(w,h)`n	draw.RoundedBox(10,0,0,w,h,$GVar.Utils.Colors.DarkBlue)`n	draw.RoundedBox(10,0,0,w,20,$GVar.Utils.Colors.Black)`n	draw.RoundedBox(0,0,10,w,30,$GVar.Utils.Colors.Black)`nend`n`nfunction $($AskedAuthorName)UIFrame:SetFrameSize(w, h)`n	self:SetSize(w, h)`n	self:Center()`nend`n`nvgui.Register(`"$($AskedAuthorName)UIFrame`", $($AskedAuthorName)UIFrame, `"DFrame`")"
            })
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\utils\__icons.lua"
                Type = "File"
                Content = "$FileHeader`n`nlocal icons = {`n	mat_01 = Material(`"materials/$AuthorNameLower/$AskedAddonNameLower/my_mat.png`"),`n`n	props_16 = `"icon16/bricks.png`",`n}`n`n$GVar.Utils.Icons = icons"
            })
        }
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\utils\__colors.lua"
            Type = "File"
            Content = "$FileHeader`n`nlocal colors = {`n	Umber = Color(53, 53, 53),`n	Agate = Color(40, 75, 99),`n	Black = Color(0,0,0),`n	White = Color(255, 255, 255),`n    Grey = Color(175, 175, 175),`n    DarkBlue = Color(20, 33, 61),`n    Platinium = Color(229, 229, 229),`n	Red = Color(255, 77, 77),`n    Orange = Color(255, 180, 77),`n    Green = Color(100, 255, 77),`n	Aqua = Color(39, 125, 161),`n}`n`n$GVar.Utils.Colors = colors"
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\utils\__funcs.lua"
            Type = "File"
            Content = "$FileHeader`n`nfunction $GVar.Utils:Ternary( cond, T, F )`n    if cond then return T else return F end`nend`n`nfunction $GVar.Utils:RemoveByValue( tbl, val )`n    for i, v in pairs(tbl) do`n        if (v == val) then`n            tbl[i] = nil`n        end`n    end`nend`n`nfunction $GVar.Utils:SplitByLength( str, max )`n	local lastSpace, lines = -1, 1`n	for i=1, #str do`n		if str[i] == `" `" then lastSpace = i end`n		if i == max*(lines) then`n			str = str:sub(1,lastSpace-1)..'\n'..str:sub(lastSpace+1)`n			lines = lines+1`n		end`n	end`n	return str`nend`n`nfunction $GVar.Utils:LinesToTable( str )`n	local tbl = {}`n	local lastLine = 1`n	for i=1, #str do`n		if str[i] == '\n' or i==#str then`n			tbl[#tbl+1] = str:sub(lastLine, $GVar.Utils:Ternary(str[i] == '\n', i-1, i))`n			lastLine = i+1`n		end`n	end`n	return tbl`nend`n`nfunction $GVar.Utils:StrContains( str, sub )`n    return str:find(sub, 1, true) ~= nil`nend`n`nfunction $GVar.Utils:StrStartsWith( str, start )`n    return str:sub(1, #start) == start`nend`n`nfunction $GVar.Utils:StrEndsWith( str, ending )`n    return ending == `"`" or str:sub(-#ending) == ending`nend`n`nfunction $GVar.Utils:Translate( str )`n	return $GVar.Utils:Ternary($GVar.Utils.Langs[$GVar.Config.Lang][str], $GVar.Utils.Langs[$GVar.Config.Lang][str], `" _ `")`nend`n`nfunction $GVar.Utils:SaveData( fl, tbl )`n	if not file.Exists(`"$AuthorNameLower/`" .. $GVar.Infos.Name .. `"/`"..fl..`".txt`",`"DATA`") then`n		file.Write(`"$AuthorNameLower/`" .. $GVar.Infos.Name .. `"/`"..fl..`".txt`",`"[]`")`n	end`n	file.Write(`"$AuthorNameLower/`" .. $GVar.Infos.Name .. `"/`"..fl..`".txt`", util.TableToJSON(tbl))`nend`n`nfunction $GVar.Utils:ReadData( fl )`n	if not file.Exists(`"$AuthorNameLower/`" .. $GVar.Infos.Name .. `"/`"..fl..`".txt`",`"DATA`") then`n		file.Write(`"$AuthorNameLower/`" .. $GVar.Infos.Name .. `"/`"..fl..`".txt`",`"[]`")`n	end`n	return util.JSONToTable(file.Read(`"$AuthorNameLower/`" .. $GVar.Infos.Name .. `"/`"..fl..`".txt`",`"DATA`"))`nend`n`n" + $(if($AddNotifications -eq 0){"-- NOTIFICATIONS FUNCTIONS --`n`nif CLIENT then`n	function $GVar.Utils:Notify( notification )`n		if not notification or not notification.name or not notification.color or not notification.delay or not notification.content then return end`n`n		notification.at = SysTime()`n		notification.Frame = vgui.Create(`"$($AskedAuthorName)UINotification`")`n		notification.Frame:SetNotificationContent(notification.content)`n		notification.Frame:SetNotificationColor(notification.color)`n		notification.Frame:SetNotificationName(notification.name)`n		notification.Frame:SetPos(ScrW()/2-notification.Frame:GetWide()/2, ScrH())`n		table.insert($GVar.Notifications, 1, notification)`n`n		for i=1, #$GVar.Notifications do`n			$GVar.Notifications[i].Frame:MoveTo($GVar.Notifications[i].Frame:GetX(), $GVar.Notifications[i].Frame:GetY()-notification.Frame:GetTall()-5, 0.2, 0, 1)`n		end`n`n		timer.Create(tostring(SysTime()), notification.delay, 1, function()`n			local idx = -1`n			for i=1, #$GVar.Notifications do`n				if $GVar.Notifications[i].at == notification.at then`n					idx = i`n					break`n				end`n			end`n`n			$GVar.Notifications[idx].Frame:Remove()`n			for i=idx+1, #$GVar.Notifications do`n				$GVar.Notifications[i].Frame:MoveTo($GVar.Notifications[i].Frame:GetX(), $GVar.Notifications[i].Frame:GetY()+$GVar.Notifications[idx].Frame:GetTall()+5, 0.2, 0, 1)`n			end`n`n			table.remove($GVar.Notifications, idx)`n		end)`n	end`nend`n`nif SERVER then`n	local notificationLabel = {`n		{`n			name = `"_Information_`",`n			color = $GVar.Utils.Colors.Aqua`n		},`n		{`n			name = `"_Success_`",`n			color = $GVar.Utils.Colors.Green`n		},`n		{`n			name = `"_Warning_`",`n			color = $GVar.Utils.Colors.Orange`n		},`n		{`n			name = `"_Error_`",`n			color = $GVar.Utils.Colors.Red`n		},`n	}`n`n	function $GVar.Utils:Notify( pl, all, lbl, ctt, dly )`n		if not pl or not pl:IsValid() or not pl:IsPlayer() then return end`n		if not lbl or not ctt or not dly then return end`n`n		local notification = {`n			content = ctt,`n			delay = dly,`n			name = $GVar.Utils:Translate(notificationLabel[lbl].name),`n			color = notificationLabel[lbl].color`n		}`n`n		for k, v in pairs(player.GetAll()) do`n			if (all and v:SteamID64() ~= pl:SteamID64()) or (not all and v:SteamID64() == pl:SteamID64()) then`n				if $GVar.Config.TchatNotifications then DarkRP.talkToPerson(v, notification.color, `"[`" .. notification.name  .. `"] `", $GVar.Utils.Colors.Platinium, notification.content, pl) end`n				net.Start(`"$($GVar):Notification`")`n				net.WriteTable(notification)`n				net.Send(v)`n			end`n		end`n	end`n`n	function $GVar.Utils:ConsoleNotify( pl, lbl, ctt )`n		if not pl or not pl:IsValid() or not pl:IsPlayer() then return end`n		if not lbl or not ctt then return end`n`n		local notification = {`n			content = ctt,`n			name = $GVar.Utils:Translate(notificationLabel[lbl].name),`n			color = notificationLabel[lbl].color`n		}`n`n		net.Start(`"$($GVar):ConsoleNotification`")`n		net.WriteTable(notification)`n		net.Send(pl)`n	end`nend"}) + "`n`n-- REGISTER FUNCTIONS --`n`nif CLIENT then`n    "+$(if($AddCommandsHandler -eq 0){"`n	function $GVar.Utils:RegisterConCommand( name, cmd, autocplt )`n		concommand.Add(`"$AddonNameLower_`" .. name, cmd, autocplt)`n	end"})+"`n    "+$(if($AddProperties -eq 0){"`n	function $GVar.Utils:RegisterProperty( property )`n		local id = `"$AddonNameLower_`" .. property.MenuLabel:lower()`n		property.MenuLabel = $GVar.Utils:Translate(property.MenuLabel)`n		property.Order = property.Order + 10e4`n		properties.Add(id, property)`n	end"})+"`nend`n`nif SERVER then`n    "+$(if($AddCommandsHandler -eq 0){"`n	function $GVar.Utils:RegisterCommand( name, cmd )`n		$GVar.Commands[name] = cmd`n	end"})+"`nend`n`nfunction $GVar.Utils:RegisterLanguage( locale, lang )`n	$GVar.Utils.Langs[locale] = lang`nend`n`nfunction $GVar.Utils:RegisterHook( on, name, func )`n	hook.Add(on, `"$($GVar):`" .. name, func )`nend`n`nfunction $GVar.Utils:RegisterNet( name, func )`n	if SERVER then util.AddNetworkString(`"$($GVar):`" .. name) end`n	net.Receive(`"$($GVar):`" .. name, func)`nend"
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\utils\__miscs.lua"
            Type = "File"
            Content = "$FileHeader`n`nif CLIENT then`n	surface.CreateFont(`"$($GVar):Regular35`", { font = `"Rajdhani`", size = 35 })`n	surface.CreateFont(`"$($GVar):Regular28`", { font = `"Rajdhani`", size = 28 })`n	surface.CreateFont(`"$($GVar):Regular24`", { font = `"Rajdhani`", size = 24 })`n	surface.CreateFont(`"$($GVar):Regular22`", { font = `"Rajdhani`", size = 22 })`n	surface.CreateFont(`"$($GVar):Regular18`", { font = `"Rajdhani`", size = 18 })`n	surface.CreateFont(`"$($GVar):Regular16`", { font = `"Rajdhani`", size = 16 })`n	surface.CreateFont(`"$($GVar):Regular14`", { font = `"Rajdhani`", size = 14 })`n	surface.CreateFont(`"$($GVar):Bold16`", { font = `"Rajdhani Bold`", size = 16 })`n	surface.CreateFont(`"$($GVar):Bold18`", { font = `"Rajdhani Bold`", size = 18 })`n	surface.CreateFont(`"$($GVar):Bold22`", { font = `"Rajdhani Bold`", size = 22 })`n	surface.CreateFont(`"$($GVar):Bold35`", { font = `"Rajdhani Bold`", size = 35, uppercase = true})`n`n	local meta = FindMetaTable( `"Player`" )`n`n	function meta:HasGodMode()`n		return self:GetNWBool( `"HasGodMode`" )`n	end`nend`n`nif SERVER then`n	resource.AddWorkshop(`"`")`n`n	local meta = FindMetaTable( `"Player`" )`n`n	meta.DefaultGodEnable  = meta.DefaultGodEnable  or meta.GodEnable`n	meta.DefaultGodDisable = meta.DefaultGodDisable or meta.GodDisable`n`n	function meta:GodEnable()`n		self:SetNWBool( `"HasGodMode`", true )`n		self:DefaultGodEnable()`n	end`n`n	function meta:GodDisable()`n		self:SetNWBool( `"HasGodMode`", false )`n		self:DefaultGodDisable()`n	end`nend"
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\utils\__strings.lua"
            Type = "File"
            Content = "$FileHeader`n`n`local strings = {`n    ascii_name = `"ASCII_NAME_TO_REPLACE`"`n    separator = `"\n=======================================================\n\n`",`n}`n`n$GVar.Utils.String = strings"
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "lua\$AddonNameLower\config.lua"
            Type = "File"
            Content = "$FileHeader`n`n--[[`n	Staff groups will have access to all basics moderation features`n	SuperStaff groups will have access to most sensitive features like server settings or spy mode`n	WARNING: This configuration is case sensitive`n]]`n$GVar.Config.StaffsGroups = {`"Mod in Test`", `"Mod`", `"Dev`", `"Admin`",`"superadmin`"}`n$GVar.Config.SuperStaffsGroups = {`"Dev`", `"Admin`",`"superadmin`"}`n`n$GVar.Config.Lang = `"en`""+$(if($AddNotifications -eq 0){"`n$GVar.Config.TchatNotifications = false"})
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "addon.txt"
            Type = "File"
            Content = "`"AddonInfo`"`n{`n	`"name`"            `"$AddonName`"`n	`"version`"         `"1.0.0`"`n	`"up_date`"         `"$(Get-Date -Format "MM/dd/yyy")`"`n	`"author_name`"     `"$AskedAuthorName`"`n}"
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = "LICENSE"
            Type = "File"
            Content = "                    GNU GENERAL PUBLIC LICENSE`n                       Version 3, 29 June 2007`n`n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>`n Everyone is permitted to copy and distribute verbatim copies`n of this license document, but changing it is not allowed.`n`n                            Preamble`n`n  The GNU General Public License is a free, copyleft license for`nsoftware and other kinds of works.`n`n  The licenses for most software and other practical works are designed`nto take away your freedom to share and change the works.  By contrast,`nthe GNU General Public License is intended to guarantee your freedom to`nshare and change all versions of a program--to make sure it remains free`nsoftware for all its users.  We, the Free Software Foundation, use the`nGNU General Public License for most of our software; it applies also to`nany other work released this way by its authors.  You can apply it to`nyour programs, too.`n`n  When we speak of free software, we are referring to freedom, not`nprice.  Our General Public Licenses are designed to make sure that you`nhave the freedom to distribute copies of free software (and charge for`nthem if you wish), that you receive source code or can get it if you`nwant it, that you can change the software or use pieces of it in new`nfree programs, and that you know you can do these things.`n`n  To protect your rights, we need to prevent others from denying you`nthese rights or asking you to surrender the rights.  Therefore, you have`ncertain responsibilities if you distribute copies of the software, or if`nyou modify it: responsibilities to respect the freedom of others.`n`n  For example, if you distribute copies of such a program, whether`ngratis or for a fee, you must pass on to the recipients the same`nfreedoms that you received.  You must make sure that they, too, receive`nor can get the source code.  And you must show them these terms so they`nknow their rights.`n`n  Developers that use the GNU GPL protect your rights with two steps:`n(1) assert copyright on the software, and (2) offer you this License`ngiving you legal permission to copy, distribute and/or modify it.`n`n  For the developers' and authors' protection, the GPL clearly explains`nthat there is no warranty for this free software.  For both users' and`nauthors' sake, the GPL requires that modified versions be marked as`nchanged, so that their problems will not be attributed erroneously to`nauthors of previous versions.`n`n  Some devices are designed to deny users access to install or run`nmodified versions of the software inside them, although the manufacturer`ncan do so.  This is fundamentally incompatible with the aim of`nprotecting users' freedom to change the software.  The systematic`npattern of such abuse occurs in the area of products for individuals to`nuse, which is precisely where it is most unacceptable.  Therefore, we`nhave designed this version of the GPL to prohibit the practice for those`nproducts.  If such problems arise substantially in other domains, we`nstand ready to extend this provision to those domains in future versions`nof the GPL, as needed to protect the freedom of users.`n`n  Finally, every program is threatened constantly by software patents.`nStates should not allow patents to restrict development and use of`nsoftware on general-purpose computers, but in those that do, we wish to`navoid the special danger that patents applied to a free program could`nmake it effectively proprietary.  To prevent this, the GPL assures that`npatents cannot be used to render the program non-free.`n`n  The precise terms and conditions for copying, distribution and`nmodification follow.`n`n                       TERMS AND CONDITIONS`n`n  0. Definitions.`n`n  `"This License`" refers to version 3 of the GNU General Public License.`n`n  `"Copyright`" also means copyright-like laws that apply to other kinds of`nworks, such as semiconductor masks.`n`n  `"The Program`" refers to any copyrightable work licensed under this`nLicense.  Each licensee is addressed as `"you`".  `"Licensees`" and`n`"recipients`" may be individuals or organizations.`n`n  To `"modify`" a work means to copy from or adapt all or part of the work`nin a fashion requiring copyright permission, other than the making of an`nexact copy.  The resulting work is called a `"modified version`" of the`nearlier work or a work `"based on`" the earlier work.`n`n  A `"covered work`" means either the unmodified Program or a work based`non the Program.`n`n  To `"propagate`" a work means to do anything with it that, without`npermission, would make you directly or secondarily liable for`ninfringement under applicable copyright law, except executing it on a`ncomputer or modifying a private copy.  Propagation includes copying,`ndistribution (with or without modification), making available to the`npublic, and in some countries other activities as well.`n`n  To `"convey`" a work means any kind of propagation that enables other`nparties to make or receive copies.  Mere interaction with a user through`na computer network, with no transfer of a copy, is not conveying.`n`n  An interactive user interface displays `"Appropriate Legal Notices`"`nto the extent that it includes a convenient and prominently visible`nfeature that (1) displays an appropriate copyright notice, and (2)`ntells the user that there is no warranty for the work (except to the`nextent that warranties are provided), that licensees may convey the`nwork under this License, and how to view a copy of this License.  If`nthe interface presents a list of user commands or options, such as a`nmenu, a prominent item in the list meets this criterion.`n`n  1. Source Code.`n`n  The `"source code`" for a work means the preferred form of the work`nfor making modifications to it.  `"Object code`" means any non-source`nform of a work.`n`n  A `"Standard Interface`" means an interface that either is an official`nstandard defined by a recognized standards body, or, in the case of`ninterfaces specified for a particular programming language, one that`nis widely used among developers working in that language.`n`n  The `"System Libraries`" of an executable work include anything, other`nthan the work as a whole, that (a) is included in the normal form of`npackaging a Major Component, but which is not part of that Major`nComponent, and (b) serves only to enable use of the work with that`nMajor Component, or to implement a Standard Interface for which an`nimplementation is available to the public in source code form.  A`n`"Major Component`", in this context, means a major essential component`n(kernel, window system, and so on) of the specific operating system`n(if any) on which the executable work runs, or a compiler used to`nproduce the work, or an object code interpreter used to run it.`n`n  The `"Corresponding Source`" for a work in object code form means all`nthe source code needed to generate, install, and (for an executable`nwork) run the object code and to modify the work, including scripts to`ncontrol those activities.  However, it does not include the work's`nSystem Libraries, or general-purpose tools or generally available free`nprograms which are used unmodified in performing those activities but`nwhich are not part of the work.  For example, Corresponding Source`nincludes interface definition files associated with source files for`nthe work, and the source code for shared libraries and dynamically`nlinked subprograms that the work is specifically designed to require,`nsuch as by intimate data communication or control flow between those`nsubprograms and other parts of the work.`n`n  The Corresponding Source need not include anything that users`ncan regenerate automatically from other parts of the Corresponding`nSource.`n`n  The Corresponding Source for a work in source code form is that`nsame work.`n`n  2. Basic Permissions.`n`n  All rights granted under this License are granted for the term of`ncopyright on the Program, and are irrevocable provided the stated`nconditions are met.  This License explicitly affirms your unlimited`npermission to run the unmodified Program.  The output from running a`ncovered work is covered by this License only if the output, given its`ncontent, constitutes a covered work.  This License acknowledges your`nrights of fair use or other equivalent, as provided by copyright law.`n`n  You may make, run and propagate covered works that you do not`nconvey, without conditions so long as your license otherwise remains`nin force.  You may convey covered works to others for the sole purpose`nof having them make modifications exclusively for you, or provide you`nwith facilities for running those works, provided that you comply with`nthe terms of this License in conveying all material for which you do`nnot control copyright.  Those thus making or running the covered works`nfor you must do so exclusively on your behalf, under your direction`nand control, on terms that prohibit them from making any copies of`nyour copyrighted material outside their relationship with you.`n`n  Conveying under any other circumstances is permitted solely under`nthe conditions stated below.  Sublicensing is not allowed; section 10`nmakes it unnecessary.`n`n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.`n`n  No covered work shall be deemed part of an effective technological`nmeasure under any applicable law fulfilling obligations under article`n11 of the WIPO copyright treaty adopted on 20 December 1996, or`nsimilar laws prohibiting or restricting circumvention of such`nmeasures.`n`n  When you convey a covered work, you waive any legal power to forbid`ncircumvention of technological measures to the extent such circumvention`nis effected by exercising rights under this License with respect to`nthe covered work, and you disclaim any intention to limit operation or`nmodification of the work as a means of enforcing, against the work's`nusers, your or third parties' legal rights to forbid circumvention of`ntechnological measures.`n`n  4. Conveying Verbatim Copies.`n`n  You may convey verbatim copies of the Program's source code as you`nreceive it, in any medium, provided that you conspicuously and`nappropriately publish on each copy an appropriate copyright notice;`nkeep intact all notices stating that this License and any`nnon-permissive terms added in accord with section 7 apply to the code;`nkeep intact all notices of the absence of any warranty; and give all`nrecipients a copy of this License along with the Program.`n`n  You may charge any price or no price for each copy that you convey,`nand you may offer support or warranty protection for a fee.`n`n  5. Conveying Modified Source Versions.`n`n  You may convey a work based on the Program, or the modifications to`nproduce it from the Program, in the form of source code under the`nterms of section 4, provided that you also meet all of these conditions:`n`n    a) The work must carry prominent notices stating that you modified`n    it, and giving a relevant date.`n`n    b) The work must carry prominent notices stating that it is`n    released under this License and any conditions added under section`n    7.  This requirement modifies the requirement in section 4 to`n    `"keep intact all notices`".`n`n    c) You must license the entire work, as a whole, under this`n    License to anyone who comes into possession of a copy.  This`n    License will therefore apply, along with any applicable section 7`n    additional terms, to the whole of the work, and all its parts,`n    regardless of how they are packaged.  This License gives no`n    permission to license the work in any other way, but it does not`n    invalidate such permission if you have separately received it.`n`n    d) If the work has interactive user interfaces, each must display`n    Appropriate Legal Notices; however, if the Program has interactive`n    interfaces that do not display Appropriate Legal Notices, your`n    work need not make them do so.`n`n  A compilation of a covered work with other separate and independent`nworks, which are not by their nature extensions of the covered work,`nand which are not combined with it such as to form a larger program,`nin or on a volume of a storage or distribution medium, is called an`n`"aggregate`" if the compilation and its resulting copyright are not`nused to limit the access or legal rights of the compilation's users`nbeyond what the individual works permit.  Inclusion of a covered work`nin an aggregate does not cause this License to apply to the other`nparts of the aggregate.`n`n  6. Conveying Non-Source Forms.`n`n  You may convey a covered work in object code form under the terms`nof sections 4 and 5, provided that you also convey the`nmachine-readable Corresponding Source under the terms of this License,`nin one of these ways:`n`n    a) Convey the object code in, or embodied in, a physical product`n    (including a physical distribution medium), accompanied by the`n    Corresponding Source fixed on a durable physical medium`n    customarily used for software interchange.`n`n    b) Convey the object code in, or embodied in, a physical product`n    (including a physical distribution medium), accompanied by a`n    written offer, valid for at least three years and valid for as`n    long as you offer spare parts or customer support for that product`n    model, to give anyone who possesses the object code either (1) a`n    copy of the Corresponding Source for all the software in the`n    product that is covered by this License, on a durable physical`n    medium customarily used for software interchange, for a price no`n    more than your reasonable cost of physically performing this`n    conveying of source, or (2) access to copy the`n    Corresponding Source from a network server at no charge.`n`n    c) Convey individual copies of the object code with a copy of the`n    written offer to provide the Corresponding Source.  This`n    alternative is allowed only occasionally and noncommercially, and`n    only if you received the object code with such an offer, in accord`n    with subsection 6b.`n`n    d) Convey the object code by offering access from a designated`n    place (gratis or for a charge), and offer equivalent access to the`n    Corresponding Source in the same way through the same place at no`n    further charge.  You need not require recipients to copy the`n    Corresponding Source along with the object code.  If the place to`n    copy the object code is a network server, the Corresponding Source`n    may be on a different server (operated by you or a third party)`n    that supports equivalent copying facilities, provided you maintain`n    clear directions next to the object code saying where to find the`n    Corresponding Source.  Regardless of what server hosts the`n    Corresponding Source, you remain obligated to ensure that it is`n    available for as long as needed to satisfy these requirements.`n`n    e) Convey the object code using peer-to-peer transmission, provided`n    you inform other peers where the object code and Corresponding`n    Source of the work are being offered to the general public at no`n    charge under subsection 6d.`n`n  A separable portion of the object code, whose source code is excluded`nfrom the Corresponding Source as a System Library, need not be`nincluded in conveying the object code work.`n`n  A `"User Product`" is either (1) a `"consumer product`", which means any`ntangible personal property which is normally used for personal, family,`nor household purposes, or (2) anything designed or sold for incorporation`ninto a dwelling.  In determining whether a product is a consumer product,`ndoubtful cases shall be resolved in favor of coverage.  For a particular`nproduct received by a particular user, `"normally used`" refers to a`ntypical or common use of that class of product, regardless of the status`nof the particular user or of the way in which the particular user`nactually uses, or expects or is expected to use, the product.  A product`nis a consumer product regardless of whether the product has substantial`ncommercial, industrial or non-consumer uses, unless such uses represent`nthe only significant mode of use of the product.`n`n  `"Installation Information`" for a User Product means any methods,`nprocedures, authorization keys, or other information required to install`nand execute modified versions of a covered work in that User Product from`na modified version of its Corresponding Source.  The information must`nsuffice to ensure that the continued functioning of the modified object`ncode is in no case prevented or interfered with solely because`nmodification has been made.`n`n  If you convey an object code work under this section in, or with, or`nspecifically for use in, a User Product, and the conveying occurs as`npart of a transaction in which the right of possession and use of the`nUser Product is transferred to the recipient in perpetuity or for a`nfixed term (regardless of how the transaction is characterized), the`nCorresponding Source conveyed under this section must be accompanied`nby the Installation Information.  But this requirement does not apply`nif neither you nor any third party retains the ability to install`nmodified object code on the User Product (for example, the work has`nbeen installed in ROM).`n`n  The requirement to provide Installation Information does not include a`nrequirement to continue to provide support service, warranty, or updates`nfor a work that has been modified or installed by the recipient, or for`nthe User Product in which it has been modified or installed.  Access to a`nnetwork may be denied when the modification itself materially and`nadversely affects the operation of the network or violates the rules and`nprotocols for communication across the network.`n`n  Corresponding Source conveyed, and Installation Information provided,`nin accord with this section must be in a format that is publicly`ndocumented (and with an implementation available to the public in`nsource code form), and must require no special password or key for`nunpacking, reading or copying.`n`n  7. Additional Terms.`n`n  `"Additional permissions`" are terms that supplement the terms of this`nLicense by making exceptions from one or more of its conditions.`nAdditional permissions that are applicable to the entire Program shall`nbe treated as though they were included in this License, to the extent`nthat they are valid under applicable law.  If additional permissions`napply only to part of the Program, that part may be used separately`nunder those permissions, but the entire Program remains governed by`nthis License without regard to the additional permissions.`n`n  When you convey a copy of a covered work, you may at your option`nremove any additional permissions from that copy, or from any part of`nit.  (Additional permissions may be written to require their own`nremoval in certain cases when you modify the work.)  You may place`nadditional permissions on material, added by you to a covered work,`nfor which you have or can give appropriate copyright permission.`n`n  Notwithstanding any other provision of this License, for material you`nadd to a covered work, you may (if authorized by the copyright holders of`nthat material) supplement the terms of this License with terms:`n`n    a) Disclaiming warranty or limiting liability differently from the`n    terms of sections 15 and 16 of this License; or`n`n    b) Requiring preservation of specified reasonable legal notices or`n    author attributions in that material or in the Appropriate Legal`n    Notices displayed by works containing it; or`n`n    c) Prohibiting misrepresentation of the origin of that material, or`n    requiring that modified versions of such material be marked in`n    reasonable ways as different from the original version; or`n`n    d) Limiting the use for publicity purposes of names of licensors or`n    authors of the material; or`n`n    e) Declining to grant rights under trademark law for use of some`n    trade names, trademarks, or service marks; or`n`n    f) Requiring indemnification of licensors and authors of that`n    material by anyone who conveys the material (or modified versions of`n    it) with contractual assumptions of liability to the recipient, for`n    any liability that these contractual assumptions directly impose on`n    those licensors and authors.`n`n  All other non-permissive additional terms are considered `"further`nrestrictions`" within the meaning of section 10.  If the Program as you`nreceived it, or any part of it, contains a notice stating that it is`ngoverned by this License along with a term that is a further`nrestriction, you may remove that term.  If a license document contains`na further restriction but permits relicensing or conveying under this`nLicense, you may add to a covered work material governed by the terms`nof that license document, provided that the further restriction does`nnot survive such relicensing or conveying.`n`n  If you add terms to a covered work in accord with this section, you`nmust place, in the relevant source files, a statement of the`nadditional terms that apply to those files, or a notice indicating`nwhere to find the applicable terms.`n`n  Additional terms, permissive or non-permissive, may be stated in the`nform of a separately written license, or stated as exceptions;`nthe above requirements apply either way.`n`n  8. Termination.`n`n  You may not propagate or modify a covered work except as expressly`nprovided under this License.  Any attempt otherwise to propagate or`nmodify it is void, and will automatically terminate your rights under`nthis License (including any patent licenses granted under the third`nparagraph of section 11).`n`n  However, if you cease all violation of this License, then your`nlicense from a particular copyright holder is reinstated (a)`nprovisionally, unless and until the copyright holder explicitly and`nfinally terminates your license, and (b) permanently, if the copyright`nholder fails to notify you of the violation by some reasonable means`nprior to 60 days after the cessation.`n`n  Moreover, your license from a particular copyright holder is`nreinstated permanently if the copyright holder notifies you of the`nviolation by some reasonable means, this is the first time you have`nreceived notice of violation of this License (for any work) from that`ncopyright holder, and you cure the violation prior to 30 days after`nyour receipt of the notice.`n`n  Termination of your rights under this section does not terminate the`nlicenses of parties who have received copies or rights from you under`nthis License.  If your rights have been terminated and not permanently`nreinstated, you do not qualify to receive new licenses for the same`nmaterial under section 10.`n`n  9. Acceptance Not Required for Having Copies.`n`n  You are not required to accept this License in order to receive or`nrun a copy of the Program.  Ancillary propagation of a covered work`noccurring solely as a consequence of using peer-to-peer transmission`nto receive a copy likewise does not require acceptance.  However,`nnothing other than this License grants you permission to propagate or`nmodify any covered work.  These actions infringe copyright if you do`nnot accept this License.  Therefore, by modifying or propagating a`ncovered work, you indicate your acceptance of this License to do so.`n`n  10. Automatic Licensing of Downstream Recipients.`n`n  Each time you convey a covered work, the recipient automatically`nreceives a license from the original licensors, to run, modify and`npropagate that work, subject to this License.  You are not responsible`nfor enforcing compliance by third parties with this License.`n`n  An `"entity transaction`" is a transaction transferring control of an`norganization, or substantially all assets of one, or subdividing an`norganization, or merging organizations.  If propagation of a covered`nwork results from an entity transaction, each party to that`ntransaction who receives a copy of the work also receives whatever`nlicenses to the work the party's predecessor in interest had or could`ngive under the previous paragraph, plus a right to possession of the`nCorresponding Source of the work from the predecessor in interest, if`nthe predecessor has it or can get it with reasonable efforts.`n`n  You may not impose any further restrictions on the exercise of the`nrights granted or affirmed under this License.  For example, you may`nnot impose a license fee, royalty, or other charge for exercise of`nrights granted under this License, and you may not initiate litigation`n(including a cross-claim or counterclaim in a lawsuit) alleging that`nany patent claim is infringed by making, using, selling, offering for`nsale, or importing the Program or any portion of it.`n`n  11. Patents.`n`n  A `"contributor`" is a copyright holder who authorizes use under this`nLicense of the Program or a work on which the Program is based.  The`nwork thus licensed is called the contributor's `"contributor version`".`n`n  A contributor's `"essential patent claims`" are all patent claims`nowned or controlled by the contributor, whether already acquired or`nhereafter acquired, that would be infringed by some manner, permitted`nby this License, of making, using, or selling its contributor version,`nbut do not include claims that would be infringed only as a`nconsequence of further modification of the contributor version.  For`npurposes of this definition, `"control`" includes the right to grant`npatent sublicenses in a manner consistent with the requirements of`nthis License.`n`n  Each contributor grants you a non-exclusive, worldwide, royalty-free`npatent license under the contributor's essential patent claims, to`nmake, use, sell, offer for sale, import and otherwise run, modify and`npropagate the contents of its contributor version.`n`n  In the following three paragraphs, a `"patent license`" is any express`nagreement or commitment, however denominated, not to enforce a patent`n(such as an express permission to practice a patent or covenant not to`nsue for patent infringement).  To `"grant`" such a patent license to a`nparty means to make such an agreement or commitment not to enforce a`npatent against the party.`n`n  If you convey a covered work, knowingly relying on a patent license,`nand the Corresponding Source of the work is not available for anyone`nto copy, free of charge and under the terms of this License, through a`npublicly available network server or other readily accessible means,`nthen you must either (1) cause the Corresponding Source to be so`navailable, or (2) arrange to deprive yourself of the benefit of the`npatent license for this particular work, or (3) arrange, in a manner`nconsistent with the requirements of this License, to extend the patent`nlicense to downstream recipients.  `"Knowingly relying`" means you have`nactual knowledge that, but for the patent license, your conveying the`ncovered work in a country, or your recipient's use of the covered work`nin a country, would infringe one or more identifiable patents in that`ncountry that you have reason to believe are valid.`n`n  If, pursuant to or in connection with a single transaction or`narrangement, you convey, or propagate by procuring conveyance of, a`ncovered work, and grant a patent license to some of the parties`nreceiving the covered work authorizing them to use, propagate, modify`nor convey a specific copy of the covered work, then the patent license`nyou grant is automatically extended to all recipients of the covered`nwork and works based on it.`n`n  A patent license is `"discriminatory`" if it does not include within`nthe scope of its coverage, prohibits the exercise of, or is`nconditioned on the non-exercise of one or more of the rights that are`nspecifically granted under this License.  You may not convey a covered`nwork if you are a party to an arrangement with a third party that is`nin the business of distributing software, under which you make payment`nto the third party based on the extent of your activity of conveying`nthe work, and under which the third party grants, to any of the`nparties who would receive the covered work from you, a discriminatory`npatent license (a) in connection with copies of the covered work`nconveyed by you (or copies made from those copies), or (b) primarily`nfor and in connection with specific products or compilations that`ncontain the covered work, unless you entered into that arrangement,`nor that patent license was granted, prior to 28 March 2007.`n`n  Nothing in this License shall be construed as excluding or limiting`nany implied license or other defenses to infringement that may`notherwise be available to you under applicable patent law.`n`n  12. No Surrender of Others' Freedom.`n`n  If conditions are imposed on you (whether by court order, agreement or`notherwise) that contradict the conditions of this License, they do not`nexcuse you from the conditions of this License.  If you cannot convey a`ncovered work so as to satisfy simultaneously your obligations under this`nLicense and any other pertinent obligations, then as a consequence you may`nnot convey it at all.  For example, if you agree to terms that obligate you`nto collect a royalty for further conveying from those to whom you convey`nthe Program, the only way you could satisfy both those terms and this`nLicense would be to refrain entirely from conveying the Program.`n`n  13. Use with the GNU Affero General Public License.`n`n  Notwithstanding any other provision of this License, you have`npermission to link or combine any covered work with a work licensed`nunder version 3 of the GNU Affero General Public License into a single`ncombined work, and to convey the resulting work.  The terms of this`nLicense will continue to apply to the part which is the covered work,`nbut the special requirements of the GNU Affero General Public License,`nsection 13, concerning interaction through a network will apply to the`ncombination as such.`n`n  14. Revised Versions of this License.`n`n  The Free Software Foundation may publish revised and/or new versions of`nthe GNU General Public License from time to time.  Such new versions will`nbe similar in spirit to the present version, but may differ in detail to`naddress new problems or concerns.`n`n  Each version is given a distinguishing version number.  If the`nProgram specifies that a certain numbered version of the GNU General`nPublic License `"or any later version`" applies to it, you have the`noption of following the terms and conditions either of that numbered`nversion or of any later version published by the Free Software`nFoundation.  If the Program does not specify a version number of the`nGNU General Public License, you may choose any version ever published`nby the Free Software Foundation.`n`n  If the Program specifies that a proxy can decide which future`nversions of the GNU General Public License can be used, that proxy's`npublic statement of acceptance of a version permanently authorizes you`nto choose that version for the Program.`n`n  Later license versions may give you additional or different`npermissions.  However, no additional obligations are imposed on any`nauthor or copyright holder as a result of your choosing to follow a`nlater version.`n`n  15. Disclaimer of Warranty.`n`n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY`nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT`nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM `"AS IS`" WITHOUT WARRANTY`nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,`nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR`nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM`nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF`nALL NECESSARY SERVICING, REPAIR OR CORRECTION.`n`n  16. Limitation of Liability.`n`n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING`nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS`nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY`nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE`nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF`nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD`nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),`nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF`nSUCH DAMAGES.`n`n  17. Interpretation of Sections 15 and 16.`n`n  If the disclaimer of warranty and limitation of liability provided`nabove cannot be given local legal effect according to their terms,`nreviewing courts shall apply local law that most closely approximates`nan absolute waiver of all civil liability in connection with the`nProgram, unless a warranty or assumption of liability accompanies a`ncopy of the Program in return for a fee.`n`n                     END OF TERMS AND CONDITIONS`n`n            How to Apply These Terms to Your New Programs`n`n  If you develop a new program, and you want it to be of the greatest`npossible use to the public, the best way to achieve this is to make it`nfree software which everyone can redistribute and change under these terms.`n`n  To do so, attach the following notices to the program.  It is safest`nto attach them to the start of each source file to most effectively`nstate the exclusion of warranty; and each file should have at least`nthe `"copyright`" line and a pointer to where the full notice is found.`n`n    $AskedAddonDescription`n    Copyright (C) $(Get-Date -Format "yyyy")  $AskedAuthorName`n`n    This program is free software: you can redistribute it and/or modify`n    it under the terms of the GNU General Public License as published by`n    the Free Software Foundation, either version 3 of the License, or`n    (at your option) any later version.`n`n    This program is distributed in the hope that it will be useful,`n    but WITHOUT ANY WARRANTY; without even the implied warranty of`n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the`n    GNU General Public License for more details.`n`n    You should have received a copy of the GNU General Public License`n    along with this program.  If not, see <https://www.gnu.org/licenses/>.`n`nAlso add information on how to contact you by electronic and paper mail.`n`n  If the program does terminal interaction, make it output a short`nnotice like this when it starts in an interactive mode:`n`n    $AddonName  Copyright (C) $(Get-Date -Format "yyyy")  $AskedAuthorName`n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.`n    This is free software, and you are welcome to redistribute it`n    under certain conditions; type `show c' for details.`n`nThe hypothetical commands `show w' and `show c' should show the appropriate`nparts of the General Public License.  Of course, your program's commands`nmight be different; for a GUI interface, you would use an `"about box`".`n`n  You should also get your employer (if you work as a programmer) or school,`nif any, to sign a `"copyright disclaimer`" for the program, if necessary.`nFor more information on this, and how to apply and follow the GNU GPL, see`n<https://www.gnu.org/licenses/>.`n`n  The GNU General Public License does not permit incorporating your program`ninto proprietary programs.  If your program is a subroutine library, you`nmay consider it more useful to permit linking proprietary applications with`nthe library.  If this is what you want to do, use the GNU Lesser General`nPublic License instead of this License.  But first, please read`n<https://www.gnu.org/licenses/why-not-lgpl.html>.`n"
        })
        $ToCreate.Add([PSCustomObject]@{
            Name = ".editorconfig"
            Type = "File"
            Content = "root = true`n[*]`nend_of_line = lf`ninsert_final_newline = false`ncharset = utf-8`nindent_style = tab`nindent_size = 4"
        })
        if($AddCommandsHandler -eq 0) {
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\register\commands\helloworld.lua"
                Type = "File"
                Content = "$FileHeader`n`nlocal cmd = {}`n`ncmd.Authorization = `"staff`"`ncmd.Aliases = {`"!hw`"}`ncmd.Description = `"_Command_HelloWorld_`"`n`nfunction cmd.Perform( pl, cmd, args )`n	"+ $(if($AddNotifications -eq 0){"$GVar.Utils:Notify(pl, false, 2, `"Hello World `" .. pl:Name() .. `" !`", 5)`n`n"})+"	return true`nend`n`n$GVar.Utils:RegisterCommand(`"/helloworld`", cmd)"
            })
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\register\hooks\server\commandshandler.lua"
                Type = "File"
                Content = "$FileHeader`n`nlocal function perform( pl, msg, team )`n	local args = {}`n	for arg in msg:gmatch(`"%S+`") do table.insert(args, arg) end`n	local cmd = args[1]:lower()`n	for i=2, #args do args[i-1] = args[i] end`n	args[#args] = nil`n`n	for k, v in pairs($GVar.Commands) do`n		if k == cmd or table.HasValue(v.Aliases, cmd) then`n			if (v.Authorization == `"staff`" and not table.HasValue($GVar.Config.StaffsGroups, pl:GetUserGroup()))`n			or (v.Authorization == `"superstaff`" and not table.HasValue($GVar.Config.SuperStaffsGroups, pl:GetUserGroup())) then`n				"+ $(if($AddNotifications -eq 0){"$GVar.Utils:Notify(pl, false, 4, $GVar.Utils:Translate(`"_Unauthorized_Action_`"), 5)`n"})+"				return false`n			end`n			local res = v.Perform( pl, cmd, args )`n			return $GVar.Utils:Ternary(res, `"`", res)`n		end`n	end`nend`n`n$GVar.Utils:RegisterHook(`"PlayerSay`", `"CommandsHandler`", perform)"
            })
        }
        if($AddProperties -eq 0) {
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\register\properties\helloworld.lua"
                Type = "File"
                Content = "$FileHeader`n`nlocal property = {`n	Type = `"simple`",`n    Order = 1,`n	PrependSpacer = true,`n	MenuLabel = `"_Hello_World_`",`n    MenuIcon = $GVar.Utils.Icons.props_16,`n`n	Filter = function( self, trgt, pl )`n		if not IsValid(trgt) or not trgt:IsPlayer() then return false end`n		if not table.HasValue($GVar.Config.StaffsGroups, pl:GetUserGroup()) then return false end`n`n		return true`n	end,`n	Checked = function( self, trgt, pl ) return false end,`n    Action = function( self, trgt ) return false end,`n    OnCreate = function(self, menu, ppt) end,`n}`n`n$GVar.Utils:RegisterProperty(property)"
            })
        }
        if($AddNotifications -eq 0) {
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\register\network\client\notification.lua"
                Type = "File"
                Content = "$FileHeader`n`nlocal function perform()`n	local notification = net.ReadTable()`n	$GVar.Utils:Notify(notification)`nend`n`n$GVar.Utils:RegisterNet(`"Notification`", perform)"
            })
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\register\network\client\consolenotification.lua"
                Type = "File"
                Content = "$FileHeader`n`nlocal function perform()`n	local notification = net.ReadTable()`n	if not notification or not notification.name or not notification.color or not notification.content then return end`n	MsgC($GVar.Utils.Colors.Grey, $GVar.Utils.Strings.separator)`n	MsgC(notification.color, notification.content)`n	MsgC($GVar.Utils.Colors.Grey, $GVar.Utils.Strings.separator)`nend`n`n$GVar.Utils:RegisterNet(`"ConsoleNotification`", perform)"
            })
            $ToCreate.Add([PSCustomObject]@{
                Name = "lua\$AddonNameLower\utils\ui\notification.lua"
                Type = "File"
                Content = "$FileHeader`n`nlocal $($AskedAuthorName)UINotification = {}`n`n$($AskedAuthorName)UINotification.Content = `"`"`n$($AskedAuthorName)UINotification.Color = $GVar.Utils.Colors.White`n$($AskedAuthorName)UINotification.Name = nil`n`n$($AskedAuthorName)UINotification.Childrens = {}`n`nfunction $($AskedAuthorName)UINotification:Init()`n	self:SetTitle(`"`")`n	self:SetVisible(true)`n	self:SetDraggable(false)`n	self:ShowCloseButton(false)`n	self:SetSize(ScrW()/4, 32)`n`n	local contentText = vgui.Create(`"DLabel`", self)`n    contentText:SetPos(40, 0)`n    contentText:SetText(self.Content)`n    contentText:SetContentAlignment(4)`n    contentText:SetTextColor($GVar.Utils.Colors.Platinium)`n    contentText:SetFont(`"$($GVar):Bold18`")`n`n	$($AskedAuthorName)UINotification.Childrens[`"content`"] = contentText`n`n	surface.PlaySound(`"$AuthorNameLower/$AskedAddonNameLower/notify.wav`")`nend`n`nfunction $($AskedAuthorName)UINotification:Paint(w,h)`n	draw.RoundedBox(8, 0, 0, w, h, ColorAlpha($GVar.Utils.Colors.Black, 240))`n	draw.RoundedBox(16, 12, 8, 16, 16, self.Color)`nend`n`nfunction $($AskedAuthorName)UINotification:SetNotificationContent(str)`n	self.Content = str`n	$($AskedAuthorName)UINotification.Childrens[`"content`"]:SetText(str)`n	$($AskedAuthorName)UINotification.Childrens[`"content`"]:SetWrap(false)`n    $($AskedAuthorName)UINotification.Childrens[`"content`"]:SizeToContents()`n    $($AskedAuthorName)UINotification.Childrens[`"content`"]:SetTall(self:GetTall())`n	self:SetWide($($AskedAuthorName)UINotification.Childrens[`"content`"]:GetWide() + 58)`nend`n`nfunction $($AskedAuthorName)UINotification:GetNotificationContent()`n	return self.Content`nend`n`nfunction $($AskedAuthorName)UINotification:SetNotificationColor(clr)`n	self.Color = clr`nend`n`nfunction $($AskedAuthorName)UINotification:GetNotificationColor()`n	return self.Color`nend`n`nfunction $($AskedAuthorName)UINotification:SetNotificationName(str)`n	self.Name = str`nend`n`nfunction $($AskedAuthorName)UINotification:GetNotificationName()`n	return self.Name`nend`n`nvgui.Register(`"$($AskedAuthorName)UINotification`", $($AskedAuthorName)UINotification, `"DFrame`")"
            })
        }

        # Generating
        for($i=0;$i -lt $ToCreate.Count; $i++){
            New-Item -Name $($AddonNameLower + "\" + $ToCreate[$i].Name) -ItemType $ToCreate[$i].Type -Value $ToCreate[$i].Content -Force > $NULL
            CustomProgress -Total $ToCreate.Count -Progress $($i-1) -Counter $LoaderCounter
            $LoaderCounter++
            if($LoaderCounter -ge $LoaderElements.Count){$LoaderCounter = 0}
            Start-Sleep -Milliseconds 150
        }

        Header
        Write-Host "   Downloading needed resources`n`n" -ForegroundColor DarkCyan
        Invoke-WebRequest -Uri "https://cdn.dynamored.com/resources/gmod/dMargaret/resource/fonts/Rajdhani-Bold.ttf" -OutFile "$AddonNameLower\resource\fonts\Rajdhani-Bold.ttf"
        Invoke-WebRequest -Uri "https://cdn.dynamored.com/resources/gmod/dMargaret/resource/fonts/Rajdhani-Regular.ttf" -OutFile "$AddonNameLower\resource\fonts\Rajdhani-Regular.ttf"
        if($AddNotifications -eq 0){
            Invoke-WebRequest -Uri "https://cdn.dynamored.com/resources/gmod/dMargaret/sound/notify.wav" -OutFile "$AddonNameLower\sound\$AuthorNameLower\$AskedAddonNameLower\notify.wav"
        }

        Header
        Write-Host "   Generation successfully completed`n`n" -ForegroundColor Green
        Write-Host "   `"Looking back, we were the luckiest people in the world. There was no choice but to be pioneers; no time to be beginners.`"" -ForegroundColor DarkGray
        Write-Host "   - Margaret H. Hamilton`n`n" -ForegroundColor DarkGray

    } else { Error -Message "No internet connection provided. End of program" }
} else { Error -Message "License to use rejected. End of program" }